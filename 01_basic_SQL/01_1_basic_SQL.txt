Памятка о типичных ошибках и способах их исправления

Эта памятка написана, чтобы помочь Вам самостоятельно находить ошибки в своих запросах. Если ваш запрос не принимается системой, то возвращайтесь на эту страничку и пройдитесь по всем пунктам:

1. Приведите синтаксис запроса к общепринятому:

    если у вас есть время, стоит изучить руководство по стилю SQL https://www.sqlstyle.guide/ru/
    можете отформатировать ваш запрос с помощью, например, https://codebeautify.org/sqlformatter
    в любом случае, информации и примеров в курсе достаточно для того, чтобы писать запросы корректно.

2. Проверьте, что ключевые слова, названия столбцов и значения в ячейках, которые необходимо найти, написаны правильно. Особенно обратите внимание, чтобы в русских названиях столбцов не было английских букв.

3. Проверьте, что:

    количество открывающихся скобок равно количеству закрывающихся;
    запятые разделяют перечисление столбцов, но не ключевые слова;
    запросы разделяются точкой с запятой.

4. Проверьте, что последовательность команд указана верно (она отличается от последовательности выполнения команд в запросе):

SELECT 'столбцы или * для выбора всех столбцов; обязательно'

FROM 'таблица; обязательно'

WHERE 'условие/фильтрация, например, city = 'Moscow'; необязательно'

GROUP BY 'столбец, по которому хотим сгруппировать данные; необязательно'

HAVING 'условие/фильтрация на уровне сгруппированных данных; необязательно'

ORDER BY 'столбец, по которому хотим отсортировать вывод; необязательно'

5.  Если запрос включает подзапросы, выполните сначала подзапросы и удостоверьтесь, что получаете ожидаемый результат.


Смотри рисунок:
01_1_basic_SQL.jpg

На примере таблицы Сотрудник рассмотрим терминологию реляционных баз данных:

    отношение  – это структура данных целиком, набор записей (в обычном понимании – таблица) , в  примере –это Сотрудник;
    кортеж – это каждая строка , содержащая данные (более распространенный термин – запись ), например, <001, Борин С.А, 234-01-23, программист>, все кортежи в отношении должны быть различны;
    мощность – число кортежей в таблице (проще говоря, число записей), в данном случае 3, мощность отношения может быть любой (от 0 до бесконечности), порядок следования кортежей - неважен;
    атрибут – это столбец в таблице (более распространенный термин – поле ), в примере – Табельный номер, Фамилия И.О., Телефон, Должность) 
    размерность – это число атрибутов в таблице, в данном случае – 4;
    размерность отношения должна быть больше 0, порядок следования атрибутов существенен;
     домен атрибута – это допустимые значения (неповторяющиеся), которые можно занести в поле , например для атрибута Должность домен – {инженер, программист}.

Перед созданием таблицы в базе данных необходимо описать ее структуру. Для этого выполняется следующая последовательность шагов:

1. Дать таблице имя, пусть она будет называться book, вот некоторые правила для выбора имен таблиц:

    может включать латинские буквы, цифры и знак подчеркивания, должно начинаться с буквы;
    имя должно быть уникальным в пределах базы данных.

Также рекомендуется:

    чтобы имя было существительным в единственном числе;
    имя должно быть понятным и соответствовать тому объекту, который оно описывает;
    имя должно быть как можно короче, максимум до 10 символов.

Важно. Имена таблиц являются регистрозависимыми из-за операционной системы на которой работает stepik, то есть имя book и Book – разные имена. Рекомендуется для записи имен таблиц использовать только строчные (маленькие) буквы.

2. Определить структуру таблицы, из каких атрибутов(столбцов, полей) она будет состоять,  в нашем случае это:

    title – поле для хранения названия книги;
    author – поле с фамилией автора книги ;
    priсe – цена книги;
    amount – количество книг.

Правила по выбору имени поля информационного объекта:

    может включать латинские буквы, цифры и знак подчеркивания, должно начинаться с буквы;
    имя поля должно быть уникальным в пределах таблицы.

Рекомендации по выбору имени поля информационного объекта:

    имя должно быть понятным и соответствовать тем данным, которые хранятся в поле;
    имя может состоять из нескольких слов, тогда слова разделяются подчеркиванием, после подчеркивания слово пишется с маленькой буквы.

3. Включить ключевое поле book_id, которое является ОБЯЗАТЕЛЬНЫМ ЭЛЕМЕНТОМ каждой реляционной таблицы. Ключевое поле является уникальным для каждой записи, однозначно определяет запись и в дальнейшем будет использоваться для связей с другими таблицами.

Рекомендации по именованию  ключевых полей:

    имя должно состоять  из двух частей: начинаться с названия таблицы, которой поле принадлежит,   затем через подчеркивание необходимо указать id.


    book_id - ключевой столбец, целое число, которое должно генерироваться автоматически  - INT PRIMARY KEY AUTO_INCREMENT;
    title - строка текста, ее длина выбирается в зависимости от данных, которые предполагается хранить в поле, предположим, что название книги не превышает 50 символов - VARCHAR(50);
    author - строка текста - VARCHAR(30);
    priсe - для описание денежного значения используется числовой тип данных с двумя знаками после запятой - DECIMAL(8,2);
    amount - целое число - INT.

Создание таблицы

Для создания таблицы используется SQL-запрос. В нем указывается какая таблица создается, из каких атрибутов(полей) она состоит и какой тип данных имеет каждое поле, при необходимости указывается описание полей (ключевое поле и т.д.). Его структура :

    ключевые слова : CREATE TABLE
    имя создаваемой таблицы;
    открывающая круглая скобка «(»;
    название поля и его описание, которое включает тип поля и другие необязательные характеристики;
    запятая;
    название поля и его описание;
    ...
    закрывающая скобка «)».

Пример. Создадим таблицу genre следующей структуры:
Поле 		Тип, описание
genre_id 	INT PRIMARY KEY AUTO_INCREMENT
name_genre 	VARCHAR(30)

Запрос:

CREATE TABLE genre(
    genre_id INT PRIMARY KEY AUTO_INCREMENT, 
    name_genre VARCHAR(30)
);

Созданная таблица - пустая.

Рекомендации по записи SQL запроса

    Ключевые слова: SQL не является регистрозависимым языком (CREATE и create - одно и тоже ключевое слово). 
    Ключевые слова SQL и типы данных рекомендуется  записывать прописными (большими) буквами.
    Имена таблиц и полей - строчными (маленькими) буквами.
    SQL-запрос можно писать на нескольких строках.
    В конце SQL-запроса ставится точка с запятой (хотя если Вы пишете один запрос, это необязательно).

CREATE TABLE book(
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title 	VARCHAR(50),
    author 	VARCHAR(30),
    price 	DECIMAL(8, 2),
    amount 	INT 
);


Вставка записи в таблицу

Для занесения новой записи в таблицу используется SQL запрос, в котором указывается в какую таблицу, в какие поля заносить новые значения. Структура запроса:

    ключевые слова INSERT INTO (ключевое слово INTO можно пропустить);
    имя таблицы, в которую добавляется запись;
    открывающая круглая скобка «(»;
     список полей через запятую, в которые следует занести новые данные;
    закрывающая скобка «)»;
    ключевое слово VALUES;
    открывающая круглая скобка «(»;
    список значений через запятую, которые заносятся в соответствующие поля, при этом текстовые значения заключаются в кавычки, числовые значения записываются без кавычек, в качестве разделителя целой и дробной части используется точка;
    закрывающая скобка «)».

Пример. В таблицу, состоящую из двух столбцов добавим новую строку, при этом в поле1 заносится значение1,  в поле2 - значение2.

INSERT INTO таблица(поле1, поле2) 
VALUES (значение1, значение2);

Пример

Вставим новую запись в таблицу genre, созданную на предыдущем шаге ( в первых двух строках показана структура таблицы, далее - ее содержимое):
genre_id 	name_genre
INT PRIMARY KEY AUTO_INCREMENT 	VARCHAR(30)
1 	Роман

 Запрос:

INSERT INTO genre (name_genre) 
VALUES ('Роман');

Заносится только значение поля name_genre, значение ключевого поля формируется автоматически.

INSERT INTO book (title, author, price, amount)
VALUES ('Мастер и Маргарита', 'Булгаков М.А.', 670.99, 3)

INSERT INTO book (title, author, price, amount)
VALUES ('Белая гвардия', 'Булгаков М.А.', 540.50, 5);
INSERT INTO book (title, author, price, amount)
VALUES ('Идиот', 'Достоевский Ф.М.', 460.00, 10);
INSERT INTO book (title, author, price, amount)
VALUES ('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);

